/* autogenerated by Processing revision 1289 on 2023-04-24 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class perlinNewtonFlowfield extends PApplet {

PVector[][] grid;
Particle[] particles;
int cols, rows;
int spc = 5;
int total = 75000;
PVector gravity;
float inc = 0.1f;  
float baseNoise = 0;

public void setup() {
    background(0);
    /* size commented out by preprocessor */;
    /* pixelDensity commented out by preprocessor */;
    noStroke();
    colorMode(HSB, 255);
    gravity = new PVector(0.1f, 0.1f);
    cols = width / spc;
    rows = height / spc;
    grid = new PVector[cols][rows];
    
    particles = new Particle[total];
    for (int i = 0; i < particles.length; i++) {
        particles[i] = new Particle();
}
}

public void draw() {
    // background(0);
    //fill(0,5);
    //rect(0,0,width,height);
    // println(frameRate);
    float xOff = noise(baseNoise);
    for (int i = 0; i < cols; i++) {
        float yOff = noise(baseNoise);
        for (int j = 0; j < rows; j++) {
            float theta = map(noise(xOff, yOff), 0, 1, 0, TWO_PI);
            grid[i][j] = new PVector(i * spc, j * spc, theta);
            yOff += inc;
        }
        xOff += inc;
}
    //baseNoise+=0.01;
    
    for (Particle p : particles) {
        
        p.follow(this);
        p.update();
        p.checkEdges();
        p.show();
}
println(frameCount);
// saveFrame("video3/img######.png");
}



public float lookup(PVector lookup_) {
    int column = PApplet.parseInt(constrain(lookup_.x / spc, 0, cols - 1));
    int row = PApplet.parseInt(constrain(lookup_.y / spc, 0, rows - 1));
    return grid[column][row].z;
}

public void keyPressed() {
  if (key==CODED) {
    if (keyCode==LEFT) {
saveFrame("output/img######.png");
    } else if (keyCode==RIGHT) {
      println(2);
    }
  }
}
class Particle {
    PVector loc, vel, acc;
    float maxSpeed, mass;
    float fillColour;
    
    Particle() {
        loc = new PVector(random(width), random(height));
        vel = new PVector(5, -10);
        acc = new PVector(0, 0.1f);
        float y = loc.y;
        fillColour = map(y, 0, width, 96, 160);
        maxSpeed = 1;
        mass= 1;
}
    
    public void applyForce(PVector force_) {
        acc.add(force_);
}
    
    public void follow(perlinNewtonFlowfield ff) {
        PVector desired = new PVector(cos(ff.lookup(loc)), sin(ff.lookup(loc)));
        desired.mult(maxSpeed);
        
        PVector steer = PVector.sub(desired,vel);
        steer.limit(maxSpeed);
        applyForce(steer);
}
    
    public void update() {
        vel.limit(maxSpeed);
        vel.add(acc);
        loc.add(vel);
        acc.mult(0);
}
    
    public void show() {
      fill(fillColour, 255, 255,5);
        ellipse(loc.x, loc.y, mass, mass);
}
    
    public void checkEdges() {
        if (loc.x > width || loc.x < 0 || loc.y > height || loc.y < 0) {
            loc = new PVector(random(width), random(height));
        }
        
}
}


  public void settings() { size(1000, 1000);
pixelDensity(2); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "perlinNewtonFlowfield" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
